geom_line()
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5) +
geom_line(aes(x = x, y = dnorm(x, mean(x), sd(x))))
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5) +
geom_line(aes(x = x, y = dnorm(x, mean(x), sd(x)), color = "red"))
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5)
rm(p1, p2)
X <- rbinom(500)
?rbinom
X <- rbinom(500, size = 1)
X <- rbinom(500, size = 1, prob = 0.5)
plot(X)
plot(density(X))
hist(X)
hist(X, binwidth = 1)
X[1:50]
X[1]
X[1:50]
library(ggplot2)
library(dplyr)
load("~/projects/spotify2019/rda/top50")
getwd()
setwd("projects/spotify2019"
setwd("projects/spotify2019")
source('~/projects/spotify2019/analysis.R', echo=TRUE)
head(topsongs)
any(is.na(topsongs))
update.packages(ask=FALSE)
library(dplyr)
topsongs <- read_csv("top50.csv")
class(topsongs)
str(topsongs)
head(topsongs)
tail(topsongs)
names(topsongs)
any(is.na(topsongs))
topsongs <- topsongs %>% select(-X1)
colnames(topsongs) <- c("track_name", "artist", "genre", "bpm",
"energy", "danceability", "loudness", "liveness",
"valence", "length", "acousticness", "speechiness",
"popularity")
?file.path
getwd()
library(dplyr)
topsongs <- read_csv("data/top50.csv")
class(topsongs)
str(topsongs)
head(topsongs)
tail(topsongs)
names(topsongs)
any(is.na(topsongs))
topsongs <- topsongs %>% select(-X1)
colnames(topsongs) <- c("track_name", "artist", "genre", "bpm",
"energy", "danceability", "loudness", "liveness",
"valence", "length", "acousticness", "speechiness",
"popularity")
topsongs <- read_csv("data/top50.csv")
library(dplyr)
topsongs <- read_csv("data/top50.csv")
library(readr)
topsongs <- read_csv("data/top50.csv")
class(topsongs)
str(topsongs)
head(topsongs)
tail(topsongs)
names(topsongs)
any(is.na(topsongs))
topsongs <- topsongs %>% select(-X1)
colnames(topsongs) <- c("track_name", "artist", "genre", "bpm",
"energy", "danceability", "loudness", "liveness",
"valence", "length", "acousticness", "speechiness",
"popularity")
View(topsongs)
library(tidyverse)
?str_detect
str_detect(topsongs$track_name, "*<")
str_detect(topsongs$track_name, "+\<")
str_detect(topsongs$track_name, "+<[a-z1-9]")
str_detect(topsongs$track_name, "[0-9]")
topsongs[str_detect(topsongs$track_name, "[0-9]")]
topsongs[str_detect(topsongs$track_name, "[0-9]"),]
topsongs[str_detect(topsongs$track_name, "[0-9]<"),]
topsongs[str_detect(topsongs$track_name, "<[0-9]"),]
topsongs[str_detect(topsongs$track_name, "<"),]
topsongs[str_detect(topsongs$track_name, "[0-9]"),]
numsongs <- topsongs[str_detect(topsongs$track_name, "[0-9]"),]
numsongs[2,]
numsongs$track_name[2,]
numsongs$track_name[2]
numsongs$track_name[2:3]
num.intitle <- topsongs[str_detect(topsongs$track_name, "[0-9]"),]
str_replace(num.intitle$track_name, "Fuck, I'm Lonely")
?str_replace
test.str <- "this is a test"
str_to_title(test.str)
?apply
?sapply
num.intitle
topsongs %>% filter(artist == "Maluma") %>%
sum()
topsongs %>% filter(artist == "Maluma") %>%
summarize(n())
ind <- topsongs$artist == "Maluma"
topsongs$track_name[ind] <- "Unknown Title"
topsongs$artist == "Maluma"
View(topsongs)
View(topsongs)
topsongs %>% filter(artist %in% c("Maluma", "Lauv")) %>%
summarize(n())
topsongs %>% filter(artist %in% c("Maluma", "Lauv")) %>%
count()
topsongs %>% group_by(artist) %>%
filter(artist %in% c("Maluma", "Lauv")) %>%
count()
ind <- topsongs$artist == "Lauv"
topsongs$track_name[ind] <- "Fuck, I'm Lonely"
View(topsongs)
save(topsongs, file = "rda/top50")
rm(!topsongs)
rm(-topsongs)
rm(num.intitle, numsongs, test.str)
head(topsongs)
View(topsongs)
load("~/projects/spotify2019/rda/top50")
load("rda/top50")
# Are songs with higher valence more popular?
topsongs %>% ggplot(aes(x = valence, y = popularity)) +
geom_point()
# Are songs with higher valence more popular?
topsongs %>% ggplot(aes(x = valence, y = popularity,
color = genre)) +
geom_point()
# Are songs with higher valence more popular?
topsongs %>% ggplot(aes(x = valence, y = popularity)) +
geom_point()
summary(topsongs)
# What are the top 10 most popular songs?
topsongs %>% arrange(desc(popularity)) %>%
select(track_name)
# What are the top 10 most popular songs?
topsongs %>% arrange(desc(popularity)) %>%
select(track_name, artist)
head(topsongs)
?replace
getwd()
library(tidyverse)
topsongs <- read_csv("data/top50.csv")
class(topsongs)
str(topsongs)
head(topsongs)
tail(topsongs)
names(topsongs)
any(is.na(topsongs))
topsongs <- topsongs %>% select(-X1)
colnames(topsongs) <- c("track_name", "artist", "genre", "bpm",
"energy", "danceability", "loudness", "liveness",
"valence", "length", "acousticness", "speechiness",
"popularity")
topsongs[str_detect(topsongs$track_name, "[0-9]"),]
topsongs %>% group_by(artist) %>%
filter(artist %in% c("Maluma", "Lauv")) %>%
count()
ind <- topsongs$artist == "Maluma"
topsongs$track_name[ind] <- "Unknown Title"
ind <- topsongs$artist == "Lauv"
topsongs$track_name[ind] <- "Fuck, I'm Lonely"
View(topsongs)
head(topsongs)
topsongs[17,]
topsongs$track_name[17]
str_detect(topsongs$track_name, "\\")
str_detect(topsongs$track_name, "\")
str_detect(topsongs$track_name, "\\*[a-z]")
str_detect(topsongs$track_name, "\\*[a-z]")
?str_detect
library(tidyverse)
?str_detect
topsongs <- read_csv("data/top50.csv")
topsongs <- topsongs %>% select(-X1)
colnames(topsongs) <- c("track_name", "artist", "genre", "bpm",
"energy", "danceability", "loudness", "liveness",
"valence", "length", "acousticness", "speechiness",
"popularity")
topsongs[str_detect(topsongs$track_name, "[0-9]"),]
head(topsongs, 20)
head(topsongs$track_name, 20)
pattern <- "^-\\s[A-z]?:+\\s+[A-z]"
str_detect(topsongs$track_name, pattern)
update.packages(ask=FALSE)
library(tidyverse)
topsongs <- read_csv("data/top50.csv")
topsongs <- topsongs %>% select(-X1)
colnames(topsongs) <- c("track_name", "artist", "genre", "bpm",
"energy", "danceability", "loudness", "liveness",
"valence", "length", "acousticness", "speechiness",
"popularity")
pattern <- "-\\s[A-z]?:+\\s+[A-z]"
str_detect(topsongs$track_name, pattern)
pattern <- "-"
str_detect(topsongs$track_name, pattern)
symbols <- str_detect(topsongs$track_name, pattern)
topsongs[symbols,]
sum(symbols)
topsongs$track_name[symbols,]
topsongs$track_name[symbols]
pattern <- "-\\s*[A-z]"
symbols <- str_detect(topsongs$track_name, pattern)
topsongs$track_name[symbols]
pattern <- "-\\s*[A-z]$"
symbols <- str_detect(topsongs$track_name, pattern)
topsongs$track_name[symbols]
pattern <- "-"
symbols <- str_detect(topsongs$track_name, pattern)
topsongs$track_name[symbols]
symbols <- str_detect(topsongs$track_name, "-")
topsongs$track_name[symbols]
str_split(topsongs$track_name, "-")
topsongs[str_count(topsongs$track_name, "[0-9]"),]
str_count(topsongs$track_name, "[0-9]")
str_detect(topsongs$track_name, "[0-9]")
sum(str_detect(topsongs$track_name, "[0-9]"))
?str_split
str_split(topsongs$track_name, "-", n = 1)
str_split(topsongs$track_name, "-", n = 2)
?str_remove_all
str_remove(topsongs$track_name, "-")
str_remove(topsongs$track_name, "-\\s*[A-z]")
str_remove(topsongs$track_name, "-\\s[*A-z]")
str_remove(topsongs$track_name, "-\\s[*A-z]$")
str_remove(topsongs$track_name, "-\\s[*A-Za-z]")
str <- c("Test - Run")
str_split(str, "-")
res <- str_split(str, "-")
class(res)
length(res)
res
str_remove(str, "-")
str_remove(str, "-\\s")
str_remove(str, "-*\\s")
str_remove(str, "-\\s")
str_remove(str, "-\\s[A-z]")
str_remove(str, "-\\s[A-Za-z]")
str_remove(str, "-\\s[*A-Za-z]")
str_remove(str, "-\\s*[A-Za-z]")
library(tidyverse)
topsongs <- read_csv("data/top50.csv")
topsongs <- topsongs %>% select(-X1)
colnames(topsongs) <- c("track_name", "artist", "genre", "bpm",
"energy", "danceability", "loudness", "liveness",
"valence", "length", "acousticness", "speechiness",
"popularity")
vtr <- c("Test - Run", "Splitting - Strings")
dat <- data.frame(vector = vtr)
dat
str_split(dat$vector, "-")
str_remove(dat$vector, "-")
str_remove(dat$vector, "-*")
str_remove(dat$vector, "-[A-Za-z]")
dat %>% select(vector) %>%
str_remove("-")
dat %>% select(vector) %>%
str_remove("-")
dat %>% select(vector)
str_remove(dat$vector, "-")
str_remove(dat$vector, "-\\s")
str_remove(dat$vector, "-\\s[A-Za-z]")
str_remove(dat$vector, "-\\s[A-Za-z]{*}")
str_remove(dat$vector, "-\\s[A-Za-z]{4}")
str_remove(dat$vector, "-\\s[A-Za-z]*")
str_remove(dat$vector, "-\\s[A-Za-z]*\\s")
str_remove(dat$vector, "-\\s[A-Za-z]+")
str_remove(dat$vector, "-\\s[A-Za-z]+")
str_remove(topsongs$track_name, "-\\s[A-Za-z]+")
sum(str_detect(topsongs$track_name, "[0-9]-"))
sum(str_detect(topsongs$track_name, "-[0-9]"))
sum(str_detect(topsongs$track_name, "-"))
?replace
replace(topsongs$track_name, str_remove(topsongs$track_name, "-\\s[A-Za-z]+"))
replace(topsongs$track_name,
str_detect(topsongs$track_name, "-"),
str_remove(topsongs$track_name, "-\\s[A-Za-z]+"))
str_remove(dat$vector, "-\\s[A-Za-z]+")
dat %>% replace(vector, str_detect(vector, "-"))
dat %>% replace(vector, str_detect(vector, "-"), str_remove(vector, "-\\s[A-Za-z]+"))
topsongs$track_name <- str_remove(topsongs$track_name, "-\\s[A-Za-z]+")
str_remove(topsongs$track_name, "-\\s[A-Za-z]+")
topsongs$track_name <- str_remove(topsongs$track_name, "-\\s[A-Za-z]+")
View(topsongs)
topsongs$track_name <- str_to_title(topsongs$track_name)
View(topsongs)
topsongs[17,]
str_detect(topsongs$track_name, "\")
topsongs$track_name[1] <- "Sexf1orita"
View(topsongs)
topsongs$track_name[17] <- "La Cancion"
View(topsongs)
topsongs$track_name[33] <- "Unknown Title"
topsongs$track_name[40] <- "Fuck, I'm Lonely"
topsongs$track_name[47] <- "Te Robar"
topsongs$track_name[18] <- "Sunflower"
topsongs[c(1,3),]
ind <- c(1, 17, 18, 33, 40, 47)
titles <- c("Sexf1orita", "La Cancion", "Sunflower",
"Unknown Title", "Fuck, I'm Lonely",
"Te Robar")
topsongs$track_name[ind] <- titles
rm(list=ls())
source('~/projects/spotify2019/wrangle_data.R', echo=TRUE)
View(topsongs)
topsongs$artist[45] <- "Rosala"
rm(list=ls())
source('~/projects/spotify2019/wrangle_data.R', echo=TRUE)
library(ggplot2)
library(dplyr)
load("rda/top50")
summary(topsongs)
# What are the top 10 most popular songs?
topsongs %>% arrange(desc(popularity)) %>%
select(track_name, artist)
rm(list=ls())
load("rda/top50")
# What are the top 10 most popular songs?
topsongs %>% arrange(desc(popularity)) %>%
select(track_name, artist)
# Are songs with higher valence more popular?
topsongs %>% ggplot(aes(x = valence, y = popularity)) +
geom_point()
?sequence
vtr <- c(1, 2, 3, 4)
sequence(vtr)
vtr <- c(1, 2, 3, 4, 6)
diff(vec) == 1
diff(vtr) == 1
is.seq <- function(vec){
if(diff(vec) == 1){
return(vec[diff(vec) == 1])
}
else(return("No sequence"))
}
is.seq(vtr)
is.seq <- function(vec){
if(any(diff(vec) == 1)){
return(vec[diff(vec) == 1])
}
else(return("No sequence"))
}
is.seq(vtr)
return(vec[diff(vec) == TRUE])
is.seq <- function(vec){
if(any(diff(vec) == 1)){
return(vec[diff(vec) == TRUE])
}
else(return("No sequence"))
}
is.seq(vtr)
return(vec[diff(vec == 1) == TRUE])
is.seq <- function(vec){
if(any(diff(vec) == 1)){
return(vec[diff(vec == 1) == TRUE])
}
else(return("No sequence"))
}
is.seq(vtr)
split(vtr, diff(vtr) == 1)
diff(vtr) == 1
split(vtr, diff(vtr) == 1 == TRUE)
vtr[diff(vtr) == 1]
?order
vtr[1] + 1 == vtr[2]
is.seq <- function(i){
res <- vec[i] + 1 == vec[i + 1]
}
is.seq(vtr)
sapply(vtr, is.seq)
is.seq <- function(i){
res <- vtr[i] + 1 == vtr[i + 1]
}
sapply(vtr, is.seq)
is.seq <- function(i){
res <- vtr[i] + 1 == vtr[i + 1]
return(res)
}
sapply(vtr, is.seq)
is.seq <- function(i){
if(vtr[i] != length(vtr)){
res <- vtr[i] + 1 == vtr[i + 1]
}
return(res)
}
sapply(vtr, is.seq)
apply(vtr, is.seq)
sapply(vtr, is.seq)
is.seq <- function(i){
if(i != length(vtr)){
res <- vtr[i] + 1 == vtr[i + 1]
}
return(res)
}
sapply(vtr, is.seq)
vtr[sapply(vtr, is.seq)]
rm(list=ls())
source('~/projects/cribbage/model.R', echo=TRUE)
hand
source('~/projects/spotify2019/wrangle_data.R', echo=TRUE)
class(topsongs)
?read_csv
head(topsongs, 10)
source('~/projects/spotify2019/wrangle_data.R', echo=TRUE)
library(ggplot2)
library(dplyr)
load("rda/top50.rda")
head(topsongs)
head(topsongs$track_name)
# What are the top 10 most popular songs?
topsongs %>% arrange(desc(popularity)) %>%
select(track_name, artist)
# What are the top 10 most popular songs?
top10 <- topsongs %>% arrange(desc(popularity)) %>%
select(track_name, artist)
?slice
topsongs %>% arrange(desc(popularity)) %>%
select(track_name, artist) %>%
slice(1:10)
# What are the top 10 most popular songs?
top10 <- topsongs %>% arrange(desc(popularity)) %>%
select(track_name, artist) %>%
slice(1:10)
# What are the top 10 most popular songs?
top10 <- topsongs %>% arrange(desc(popularity)) %>%
slice(1:10)
top10
top10 %>% ggplot(aes(x = energy, y = bpm)) +
geom_point()
summary(topsongs)
summary(topsongs[,4:ncol(topsongs)])
# Is there a correlation between energy and bpm?
topsongs %>% ggplot(aes(x = bpm, y = energy)) +
geom_point()
# Is there a correlation between energy and bpm?
topsongs %>% ggplot(aes(x = bpm, y = energy)) +
geom_point(size = popularity)
names(topsongs)
# Loudness and bpm?
topsongs %>% ggplot(aes(x = bpm, y = loudness)) +
geom_point()
# Loudness and energy?
topsongs %>% ggplot(aes(x = loudness, y = energy)) +
geom_point()
# Danceability and energy?
topsongs %>% ggplot(aes(x = danceability, y = energy)) +
geom_point()
# Acousticness and energy?
topsongs %>% ggplot(aes(x = acousticness, y = energy)) +
geom_point()
# Energy and popularity?
topsongs %>% ggplot(aes(x = popularity, y = energy)) +
geom_point()
# Summarize just the numeric data
summary(topsongs[,4:ncol(topsongs)])
# Explore distributions
topsongs %>% ggplot(aes(x = liveness)) +
geom_histogram(col = "black")
# Explore distributions
topsongs %>% ggplot(aes(x = liveness)) +
geom_histogram(col = "black", binwidth = 10)
# Explore distributions
topsongs %>% ggplot(aes(x = liveness)) +
geom_histogram(col = "black", binwidth = 12)
# Explore distributions
topsongs %>% ggplot(aes(x = liveness)) +
geom_histogram(col = "black", binwidth = 2)
topsongs %>% ggplot(aes(x = acousticness)) +
geom_histogram(col = "black")
topsongs %>% ggplot(aes(x = acousticness)) +
geom_histogram(col = "black", binwidth = 2)
topsongs %>% ggplot(aes(x = acousticness)) +
geom_histogram(col = "black", binwidth = 5)
topsongs %>% ggplot(aes(x = acousticness)) +
geom_histogram(col = "black", binwidth = 2)
# Is there a correlation between energy and bpm?
topsongs %>% ggplot(aes(x = bpm, y = energy, size = popularity)) +
geom_point()
rm(top10)
head(topsongs)
topsongs <- topsongs %>% mutate_at(genre, as.factor)
?mutate_at
topsongs <- topsongs %>% mutate_at(genre, as.factor())
topsongs %>% mutate_at(genre, as.factor)
topsongs <- topsongs %>% mutate_at(vars(genre), as.factor)
str(topsongs)
# Summarize just the numeric data
summary(topsongs[,4:ncol(topsongs)])
# Loudness and energy?
topsongs %>% ggplot(aes(x = loudness, y = energy)) +
geom_point()
unique(topsongs$genre)
levels(topsongs$genre)
sum(topsongs$genre == "country rap")
sum(topsongs$genre == "dfw rap")
str_detect(topsongs$genre, "pop")
str_detect(topsongs$genre, "rap|hip")
ind <- str_detect(topsongs$genre, "rap|hip")
topsongs[ind,]
topsongs$genre[ind,]
topsongs$genre[ind]
ind <- str_detect(topsongs$genre, "[^t]rap|hip")
topsongs$genre[ind]
ind <- str_detect(topsongs$genre, "[^*a-z]rap|hip")
topsongs$genre[ind]
