ggplot(as.data.frame(data), aes(data[,1], data[,2])) +
geom_point()
class(data)
N <- 500
r <- 0.83
data <- mvrnorm(n=N, mu=c(0,0),
Sigma=matrix(c(1, r, r, 1), nrow=2),
empirical=TRUE)
data <- as.data.frame(data)
colnames(data) <- c("X", "Y")
ggplot(as.data.frame(data), aes(data[,1], data[,2])) +
geom_point()
N <- 500
r <- 0.83
data <- mvrnorm(n=N, mu=c(0,0),
Sigma=matrix(c(1, r, r, 1), nrow=2),
empirical=TRUE)
data <- as.data.frame(data)
colnames(data) <- c("X", "Y")
ggplot(as.data.frame(data), aes(X, Y)) +
geom_point()
ggplot(as.data.frame(data), aes(X, Y)) +
geom_smooth()
ggplot(as.data.frame(data), aes(X, Y)) +
geom_point() +
geom_smooth()
corrplot(data)
?MASS
??MASS
df <- data.frame(xyz = "a")
df$x
library(tidyverse)
rm(df)
library(dslabs)
data("admissions")
class(admissions)
head(admissions)
library(dplyr)
library(ggplot2)
names(admissions)
admissions %>% group_by(gender) %>%
ggplot(aes(x = admitted, y = applicants)) +
geom_col()
?pnorm
x <- rnorm(500, mean = 127.5, sd = 2.3)
q <- c(25, 50, 75)
pnorm(q)
scale(x)
mean(scale(x))
pnorm(q)
qnorm(q)
pnorm(50)
pnorm(-1)
pnorm(50, mean = 50, sd = 1)
pnorm(50, mean = 50, sd = 1, lower.tail = FALSE)
pnorm(75, mean = 50, sd = 1, lower.tail = FALSE)
x <- rnorm(500)
hist(x)
?hist
hist(x, density = 1)
hist(x)
x <- rnorm(500, mean = 50, sd = 3.4)
hist(x)
x <- rnorm(500, mean = 50, sd = 1)
hist(x)
x <- rnorm(500)
hist(x)
density(x)
x <- rnorm(500)
hist(x)
plot(density(x))
library(ggplot2)
ggplot(x, aes(x = x)) +
geom_histogram()
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram()
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black")
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5)
hist(x)
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5)
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5) +
geom_density()
?geom_density
?geom_histogram
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5) +
geom_density(stat = "density")
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5, stat = "density")
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5) +
geom_line(stat = "density")
?geom_line
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5) +
geom_line(stat = "density")
qnorm(-2)
?qnorm
pnorm(-2)
pnorm(-2, lower.tail = FALSE)
pnorm(-2.5)
pnorm(-0.5)
pnorm(0)
pnorm(0, lower.tail = FALSE)
pnorm(2, lower.tail = FALSE)
pnorm(0.5, lower.tail = FALSE)
?qnorm
qnorm(0.5)
qnorm(0.91)
qnorm(0.91, lower.tail = FALSE)
qnorm(0.334)
qnorm(0.14)
pnorm(-2)
qnorm(0.02275013)
y <- -2
dnorm(0)
dnorm(0.5)
dnorm(0.2)
dnorm(2)
s <- seq(-3, 3, 0.5)
dnorm(s)
sum(dnorm(s))
s <- seq(-3, 3, 1)
sum(dnorm(s))
dnorm(2)
rm(s, y)
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5) +
geom_line()
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.05) +
geom_line()
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.05)
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5)
ggplot(as.data.frame(x), aes(x = x, y = ..density..)) +
geom_histogram(col = "black", binwidth = 0.5)
mean(x)
p1 <- ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5)
p2 <- ggplot(as.data.frame(x), aes(x = x, y = dnorm(x,
mean(x),
sd(x)))) +
geom_line()
p2
p1 + p2
p1 <- ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5)
p2 <- ggplot(as.data.frame(x), aes(x = x,
y = dnorm(x, mean(x),
sd(x)))) +
geom_line()
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5) +
geom_line(aes(x = x, y = dnorm(x, mean(x), sd(x))))
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5) +
geom_line(aes(x = x, y = dnorm(x, mean(x), sd(x)), color = "red"))
ggplot(as.data.frame(x), aes(x = x)) +
geom_histogram(col = "black", binwidth = 0.5)
rm(p1, p2)
X <- rbinom(500)
?rbinom
X <- rbinom(500, size = 1)
X <- rbinom(500, size = 1, prob = 0.5)
plot(X)
plot(density(X))
hist(X)
hist(X, binwidth = 1)
X[1:50]
X[1]
X[1:50]
update.packages(ask=F)
# Load libraries and data, setup
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(RColorBrewer)){install.packages("RColorBrewer")}
if(!require(gridExtra)){install.packages("gridExtra")}
load("rda/top50.rda")
# Convert categoricals to factors
topsongs <- topsongs %>% mutate_at(vars(genre), as.factor)
# Group subgenres into more general genres
length(levels(topsongs$genre))
levels(topsongs$genre)
topsongs <- topsongs %>%
mutate(genre_group = as.factor(case_when(
genre %in% c("atl hip hop", "escape room", "canadian hip hop",
"dfw rap", "country rap") ~ "Hip-Hop",
genre %in% c("brostep", "australian pop", "canadian pop",
"panamanian pop", "boy band", "electropop",
"pop") ~ "Pop",
genre %in% c("latin", "r&b en espanol", "reggaeton",
"reggaeton flow") ~ "Latin",
genre %in% c("dance pop", "pop house", "trap music",
"big room", "edm") ~ "Dance")))
# Load libraries and data, setup
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(RColorBrewer)){install.packages("RColorBrewer")}
if(!require(gridExtra)){install.packages("gridExtra")}
load("rda/top50.rda")
# Convert categoricals to factors
topsongs <- topsongs %>% mutate_at(vars(genre), as.factor)
# Group subgenres into more general genres
length(levels(topsongs$genre))
levels(topsongs$genre)
topsongs <- topsongs %>%
mutate(genre_group = as.factor(case_when(
genre %in% c("atl hip hop", "escape room", "canadian hip hop",
"dfw rap", "country rap") ~ "Hip-Hop",
genre %in% c("brostep", "australian pop", "canadian pop",
"panamanian pop", "boy band", "electropop",
"pop") ~ "Pop",
genre %in% c("latin", "r&b en espanol", "reggaeton",
"reggaeton flow") ~ "Latin",
genre %in% c("dance pop", "pop house", "trap music",
"big room", "edm") ~ "Dance")))
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(RColorBrewer)){install.packages("RColorBrewer")}
if(!require(gridExtra)){install.packages("gridExtra")}
getwd()
setwd("projects/spotify2019")
load("rda/top50.rda")
# Convert categoricals to factors
topsongs <- topsongs %>% mutate_at(vars(genre), as.factor)
# Group subgenres into more general genres
length(levels(topsongs$genre))
levels(topsongs$genre)
topsongs <- topsongs %>%
mutate(genre_group = as.factor(case_when(
genre %in% c("atl hip hop", "escape room", "canadian hip hop",
"dfw rap", "country rap") ~ "Hip-Hop",
genre %in% c("brostep", "australian pop", "canadian pop",
"panamanian pop", "boy band", "electropop",
"pop") ~ "Pop",
genre %in% c("latin", "r&b en espanol", "reggaeton",
"reggaeton flow") ~ "Latin",
genre %in% c("dance pop", "pop house", "trap music",
"big room", "edm") ~ "Dance")))
?grid.arrange
# Plot energy with bpm stratified by genre
topsongs %>% ggplot(aes(x = bpm, y = energy,
color = genre_group)) +
geom_point()
bpmbox.plt <- topsongs %>%
ggplot(aes(x = bpm)) +
theme_light() +
geom_boxplot(aes(fill = genre_group)) +
scale_fill_brewer(palette = "RdBu") +
labs(x = "Genre", y = "Energy") +
ggtitle("Energy by Genre")
bpmbox.plt
bpmbox.plt <- topsongs %>%
ggplot(aes(x = genre_group, y = bpm)) +
theme_light() +
geom_boxplot(aes(fill = genre_group)) +
scale_fill_brewer(palette = "RdBu") +
labs(x = "Genre", y = "Energy") +
ggtitle("Energy by Genre")
bpmbox.plt
bpmbox.plt <- topsongs %>%
ggplot(aes(x = genre_group, y = bpm)) +
theme_light() +
geom_boxplot(aes(fill = genre_group)) +
scale_fill_brewer(palette = "RdBu") +
labs(x = "Genre", y = "Beats Per Minute") +
ggtitle("Beats Per Minute by Genre")
bpmbox.plt
bpmdens.plt <- topsongs %>%
ggplot(aes(x = energy, fill = genre_group)) +
theme_light() +
geom_density(alpha = 0.4) +
scale_fill_brewer(palette = "RdBu") +
labs(x = "Genre", y = "Beats Per Minute") +
ggtitle("BPM Density by Genre")
bpmdens.plt
bpmbox.plt
bpmdens.plt <- topsongs %>%
ggplot(aes(x = bpm, fill = genre_group)) +
theme_light() +
geom_density(alpha = 0.4) +
scale_fill_brewer(palette = "RdBu") +
labs(x = "Genre", y = "Beats Per Minute") +
ggtitle("BPM Density by Genre")
bpmdens.plt
bpmdens.plt <- topsongs %>%
ggplot(aes(x = bpm, fill = genre_group)) +
theme_light() +
geom_density(alpha = 0.4) +
scale_fill_brewer(palette = "RdBu") +
labs(x = "Beats Per Minute", y = "Density") +
ggtitle("BPM Density by Genre")
bpmdens.plt
energydens.plt <- topsongs %>%
ggplot(aes(x = energy, fill = genre_group)) +
theme_light() +
geom_density(alpha = 0.4) +
scale_fill_brewer(palette = "RdBu") +
labs(x = "Genre", y = "Energy") +
ggtitle("Energy Density by Genre")
energydens.plt
energydens.plt <- topsongs %>%
ggplot(aes(x = energy, fill = genre_group)) +
theme_light() +
geom_density(alpha = 0.4) +
scale_fill_brewer(palette = "RdBu") +
labs(x = "Energy", y = "Density") +
ggtitle("Energy Density by Genre")
energydens.plt
bpmdens.plt
scatter.plt <- topsongs %>%
ggplot(aes(x = loudness, y = energy, size = bpm)) +
theme_light() +
geom_point(aes(color = genre_group, size = bpm),
alpha = 0.8) +
scale_color_brewer(palette = "RdBu") +
geom_smooth(method = "lm") +
labs(x = "Loudness", y = "Energy") +
ggtitle("Energy vs Loudness")
scatter.plt
# Explore correlations
scatter.plt <- topsongs %>%
filter(genre_group == "Hip-Hop") %>%
ggplot(aes(x = loudness, y = energy, size = bpm)) +
theme_light() +
geom_point(aes(color = genre_group, size = bpm),
alpha = 0.8) +
scale_color_brewer(palette = "RdBu") +
geom_smooth(method = "lm") +
labs(x = "Loudness", y = "Energy") +
ggtitle("Energy vs Loudness")
scatter.plt
# Explore correlations
scatter.plt <- topsongs %>%
ggplot(aes(x = loudness, y = energy, size = bpm)) +
theme_light() +
geom_point(aes(color = genre_group, size = bpm),
alpha = 0.8) +
scale_color_brewer(palette = "RdBu") +
geom_smooth(method = "lm") +
labs(x = "Loudness", y = "Energy") +
ggtitle("Energy vs Loudness")
scatter.plt
# Explore correlations
topsongs %>% ggplot(aes(x = bpm, y = energy)) +
geom_point()
# Explore correlations
topsongs %>% filter(genre_group == "Hip-Hop") %>%
ggplot(aes(x = bpm, y = energy)) +
geom_point()
# Explore correlations
topsongs %>% ggplot(aes(x = bpm, y = energy)) +
geom_point() +
facet_wrap(~ genre_group)
# Explore correlations
topsongs %>% ggplot(aes(x = bpm, y = energy)) +
theme_light() +
geom_point() +
facet_wrap(~ genre_group) +
labs(x = "Beats Per Minute", y = "Energy") +
ggtitle("Stratified BPM vs Energy")
topsongs %>% group_by(genre_group) %>%
summarize(mean = mean(speechiness)) %>%
arrange(desc(mean))
topsongs %>% group_by(genre_group) %>%
summarize(mean_speechiness = mean(speechiness)) %>%
arrange(desc(mean))
topsongs %>% group_by(genre_group) %>%
summarize(mean_speechiness = mean(speechiness)) %>%
arrange(desc(mean))
topsongs %>% group_by(genre_group) %>%
summarize(mean = mean(speechiness)) %>%
arrange(desc(mean))
cor(topsongs$acousticness, topsongs$energy)
?facet_wrap
# Explore correlations
topsongs %>% group_by(genre_group) %>%
ggplot(aes(x = bpm, y = energy)) +
theme_light() +
geom_point() +
facet_wrap(~ genre_group) +
labs(x = "Beats Per Minute", y = "Energy") +
ggtitle("Stratified BPM vs Energy")
# Explore correlations
topsongs %>% group_by(genre_group) %>%
mutate(rho = cor(energy, bpm)) %>%
ggplot(aes(x = bpm, y = energy)) +
theme_light() +
geom_point() +
facet_wrap(rho ~ genre_group) +
labs(x = "Beats Per Minute", y = "Energy") +
ggtitle("Stratified BPM vs Energy")
# Explore correlations
topsongs %>% group_by(genre_group) %>%
mutate(rho = cor(energy, bpm)) %>%
ggplot(aes(x = bpm, y = energy)) +
theme_light() +
geom_point() +
facet_wrap(genre_group ~ rho) +
labs(x = "Beats Per Minute", y = "Energy") +
ggtitle("Stratified BPM vs Energy")
# Load libraries and data, setup
options(digits = 3)
# Explore correlations
topsongs %>% group_by(genre_group) %>%
mutate(rho = cor(energy, bpm)) %>%
ggplot(aes(x = bpm, y = energy)) +
theme_light() +
geom_point() +
facet_wrap(genre_group ~ rho) +
labs(x = "Beats Per Minute", y = "Energy") +
ggtitle("Stratified BPM vs Energy")
?facet_grid
# Explore correlations
topsongs %>% group_by(genre_group) %>%
mutate(rho = cor(energy, bpm)) %>%
ggplot(aes(x = bpm, y = energy)) +
theme_light() +
geom_point() +
facet_wrap(~ genre_group) +
facet_grid(rows = rho) +
labs(x = "Beats Per Minute", y = "Energy") +
ggtitle("Stratified BPM vs Energy")
topsongs %>% group_by(genre_group) %>%
mutate(rho = cor(energy, bpm)) %>%
ggplot(aes(x = bpm, y = energy)) +
theme_light() +
geom_point() +
facet_wrap(~ genre_group) +
facet_grid(rows = rho) +
labs(x = "Beats Per Minute", y = "Energy") +
ggtitle("Stratified BPM vs Energy")
# Explore correlations
topsongs %>% group_by(genre_group) %>%
mutate(rho = cor(energy, bpm)) %>%
ggplot(aes(x = bpm, y = energy)) +
theme_light() +
geom_point() +
facet_grid(rows = rho) +
labs(x = "Beats Per Minute", y = "Energy") +
ggtitle("Stratified BPM vs Energy")
# Explore correlations
topsongs %>% group_by(genre_group) %>%
mutate(rho = cor(energy, bpm)) %>%
ggplot(aes(x = bpm, y = energy)) +
theme_light() +
geom_point() +
facet_wrap(genre_group ~ rho) +
labs(x = "Beats Per Minute", y = "Energy") +
ggtitle("Stratified BPM vs Energy")
# Explore correlations
topsongs %>% group_by(genre_group) %>%
mutate(rho = cor(energy, bpm)) %>%
ggplot(aes(x = bpm, y = energy,
color = loudness)) +
theme_light() +
geom_point() +
facet_wrap(genre_group ~ rho) +
labs(x = "Beats Per Minute", y = "Energy") +
ggtitle("Stratified BPM vs Energy")
# Explore correlations
topsongs %>% group_by(genre_group) %>%
mutate(rho = cor(energy, bpm)) %>%
ggplot(aes(x = bpm, y = energy)) +
theme_light() +
geom_point() +
facet_wrap(genre_group ~ rho) +
labs(x = "Beats Per Minute", y = "Energy") +
ggtitle("Stratified BPM vs Energy")
topsongs %>% group_by(genre_group) %>%
summarize(mean = mean(speechiness)) %>%
arrange(desc(mean))
cor(topsongs$loudness, topsongs$energy)
energyloud.plt <- topsongs %>%
ggplot(aes(x = loudness, y = energy)) +
theme_light() +
geom_point(aes(color = genre_group),
alpha = 0.8) +
scale_color_brewer(palette = "RdBu") +
geom_smooth(method = "lm") +
labs(x = "Loudness", y = "Energy") +
ggtitle("Energy vs Loudness")
energyloud.plt
topsongs %>% ggplot(aes(x = speechiness, fill = genre_group)) +
geom_density(alpha  = 0.4)
topsongs %>% group_by(genre_group) %>%
summarize(mean = mean(speechiness)) %>%
arrange(desc(mean))
energyldns.plt <- topsongs %>% group_by(genre_group) %>%
mutate(rho = cor(energy, bpm)) %>%
ggplot(aes(x = loudness, y = energy)) +
theme_light() +
geom_point() +
facet_wrap(genre_group ~ rho) +
labs(x = "Loudness", y = "Energy") +
ggtitle("Stratified Loudness vs Energy")
energyldns.plt
topsongs %>% ggplot(aes(x = speechiness, fill = genre_group)) +
geom_density(alpha  = 0.4)
rm(ls())
rm(list = ls())
source('~/projects/spotify2019/analysis.R', echo=TRUE)
rm(*.plt)
rm(-topsongs)
rm(!topsongs)
knit_with_parameters('~/projects/spotify2019/spotify2019_EDA_report.Rmd')
